// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function() {
    'use strict';
    var Assertion, InsureObject, InvertedAssertion, disabled, generateAssertionError, insure, mockInsureObject, throwAssertionError;
    disabled = false;
    mockInsureObject = {
      must: function() {
        return mockInsureObject;
      },
      either: function() {
        return mockInsureObject;
      }
    };
    generateAssertionError = function(clauseType, variableIndex, variableValue, assertion) {
      var a, assertionMode, assertionString, _i, _len;
      assertionMode = 0;
      if (assertion instanceof Assertion) {
        assertionMode = 1;
      }
      if (((assertion != null ? assertion.length : void 0) != null) && assertion[0] instanceof Assertion) {
        assertionMode = 2;
      }
      if (assertionMode === 2 && assertion.length === 1) {
        assertion = assertion[0];
        assertionMode = 1;
      }
      if (assertionMode < 2) {
        assertionString = assertionMode === 0 ? "no assertions" : "assertion \"" + assertion.displayName + "\"";
      } else {
        assertionString = "assertions\n:";
        for (_i = 0, _len = assertion.length; _i < _len; _i++) {
          a = assertion[_i];
          assertionString += "\t" + a.displayName + "\n";
        }
      }
      return "" + clauseType + "-clause failed to insure state of variable with index " + variableIndex + " [value: " + variableValue + "] for " + (assertionString.trim());
    };
    throwAssertionError = function() {
      throw generateAssertionError.apply(null, arguments);
    };
    Assertion = (function() {
      function Assertion(name, assertionFunc, displayName) {
        this.name = name;
        this.assertionFunc = assertionFunc;
        this.assert = __bind(this.assert, this);
        this.displayName = displayName || name;
      }

      Assertion.prototype.assert = function() {
        return this.assertionFunc.apply(this, arguments);
      };

      return Assertion;

    })();
    InvertedAssertion = (function(_super) {
      __extends(InvertedAssertion, _super);

      function InvertedAssertion(baseAssertion) {
        this.assert = __bind(this.assert, this);
        InvertedAssertion.__super__.constructor.call(this, baseAssertion.name, baseAssertion.assertionFunc, "not " + baseAssertion.displayName);
      }

      InvertedAssertion.prototype.assert = function() {
        return !InvertedAssertion.__super__.assert.apply(this, arguments);
      };

      return InvertedAssertion;

    })(Assertion);
    InsureObject = (function() {
      function InsureObject(variables) {
        this.variables = variables;
        this.either = __bind(this.either, this);
        this.must = __bind(this.must, this);
      }

      InsureObject.prototype.must = function() {
        var assertion, i, j, variable, _i, _j, _len, _len1, _ref;
        if (disabled) {
          return this;
        }
        _ref = this.variables;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          variable = _ref[i];
          for (j = _j = 0, _len1 = arguments.length; _j < _len1; j = ++_j) {
            assertion = arguments[j];
            if (!assertion.assert(variable)) {
              throwAssertionError("must", i, variable, assertion);
            }
          }
        }
        return this;
      };

      InsureObject.prototype.either = function() {
        var assertion, i, variable, _i, _len, _ref;
        if (disabled) {
          return this;
        }
        _ref = this.variables;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          variable = _ref[i];
          if (__indexOf.call((function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = arguments.length; _j < _len1; _j++) {
              assertion = arguments[_j];
              _results.push(assertion.assert(variable));
            }
            return _results;
          }).apply(this, arguments), true) < 0) {
            throwAssertionError('either', i, variable, arguments);
          }
        }
        return this;
      };

      return InsureObject;

    })();
    insure = function() {
      if (disabled) {
        return this;
      }
      return new InsureObject(arguments);
    };
    insure.not = {};
    insure.registerAssertion = function(assertionName, assertionFunc) {
      var assertion;
      if (disabled) {
        return this;
      }
      if (insure[assertionName] != null) {
        throw new Error("Cannot register assertion since an assertion with the same name already exists");
      }
      assertion = new Assertion(assertionName, assertionFunc);
      insure[assertionName] = assertion;
      insure.not[assertionName] = new InvertedAssertion(assertion);
      return insure;
    };
    insure.disable = function() {
      return disabled = true;
    };
    if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
      module.exports = insure;
      return require('./insure.assertions.js');
    } else {
      return window.insure != null ? window.insure : window.insure = insure;
    }
  })();

}).call(this);

/*
//@ sourceMappingURL=insure.refactor.map
*/
